::::::::::::::
./microserviceRabbitMQ/RabbitMQDemo/Controllers/RabbitMQController.cs
::::::::::::::
using Microsoft.AspNetCore.Mvc;
using RabbitMQDemo.Services;


namespace RabbitMQDemo.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class RabbitMQController : ControllerBase
    {
        private readonly RabbitMQService _rabbitMQService;

        public RabbitMQController(RabbitMQService rabbitMQService)
        {
            _rabbitMQService = rabbitMQService;
        }

        [HttpPost("send")]
        public IActionResult SendMessage([FromBody] string message)
        {
            try
            {
                _rabbitMQService.SendMessage("fila_otimizar", message);
                return Ok($"[x] Enviado: {message}");
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Erro: {ex.Message}");
            }
        }

        [HttpGet("consume")]
        public IActionResult StartConsumer()
        {
            try
            {
                _rabbitMQService.StartConsumer("fila_otimizar");
                return Ok("Consumidor iniciado e aguardando mensagens...");
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Erro: {ex.Message}");
            }
        }
    }
}
::::::::::::::
./microserviceRabbitMQ/RabbitMQDemo/Services/RabbitMQService.cs
::::::::::::::
using RabbitMQ.Client;
using RabbitMQ.Client.Events;
using System.Text;

namespace RabbitMQDemo.Services
{
    public class RabbitMQService
    {
        private readonly ConnectionFactory _factory;
        private IConnection _connection;
        private IModel _channel;

        public RabbitMQService()
        {
            _factory = new ConnectionFactory() { HostName = "rabbitmq" };
            Connect();
        }

        public void Connect()
        {
            _connection = _factory.CreateConnection();
            _channel = _connection.CreateModel();
        }

        public void SendMessage(string queue, string message)
        {
            if (_channel == null || !_channel.IsOpen)
            {
                Connect();
            }

            _channel.QueueDeclare(queue: queue,
                                 durable: false,
                                 exclusive: false,
                                 autoDelete: false,
                                 arguments: null);

            var body = Encoding.UTF8.GetBytes(message);

            _channel.BasicPublish(exchange: "",
                                 routingKey: queue,
                                 basicProperties: null,
                                 body: body);
        }

        public void StartConsumer(string queue)
        {
            if (_channel == null || !_channel.IsOpen)
            {
                Connect();
            }

            _channel.QueueDeclare(queue: queue,
                                 durable: false,
                                 exclusive: false,
                                 autoDelete: false,
                                 arguments: null);

            var consumer = new EventingBasicConsumer(_channel);
            consumer.Received += (model, ea) =>
            {
                var body = ea.Body.ToArray();
                var message = Encoding.UTF8.GetString(body);
                Console.WriteLine($"[x] Recebido: {message}");
            };

            _channel.BasicConsume(queue: queue,
                                 autoAck: true,
                                 consumer: consumer);
        }
    }
}
::::::::::::::
./microserviceRabbitMQ/RabbitMQDemo/obj/Debug/net8.0/RabbitMQDemo.AssemblyInfo.cs
::::::::::::::
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("RabbitMQDemo")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+9c2c6408dc44adfd876ce826b055e90b73eefa68")]
[assembly: System.Reflection.AssemblyProductAttribute("RabbitMQDemo")]
[assembly: System.Reflection.AssemblyTitleAttribute("RabbitMQDemo")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.

::::::::::::::
./microserviceRabbitMQ/RabbitMQDemo/obj/Debug/net8.0/RabbitMQDemo.MvcApplicationPartsAssemblyInfo.cs
::::::::::::::
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Microsoft.AspNetCore.OpenApi")]
[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Swashbuckle.AspNetCore.SwaggerGen")]

// Generated by the MSBuild WriteCodeFragment class.

::::::::::::::
./microserviceRabbitMQ/RabbitMQDemo/obj/Debug/net8.0/.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
::::::::::::::
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]
::::::::::::::
./microserviceRabbitMQ/RabbitMQDemo/obj/Debug/net8.0/RabbitMQDemo.GlobalUsings.g.cs
::::::::::::::
// <auto-generated/>
global using global::Microsoft.AspNetCore.Builder;
global using global::Microsoft.AspNetCore.Hosting;
global using global::Microsoft.AspNetCore.Http;
global using global::Microsoft.AspNetCore.Routing;
global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Hosting;
global using global::Microsoft.Extensions.Logging;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Net.Http.Json;
global using global::System.Threading;
global using global::System.Threading.Tasks;
::::::::::::::
./microserviceRabbitMQ/RabbitMQDemo/Program.cs
::::::::::::::
using RabbitMQDemo.Services;

var builder = WebApplication.CreateBuilder(args);

// Adiciona o RabbitMQService como Singleton
builder.Services.AddSingleton<RabbitMQService>();

// Configuração padrão do projeto
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.MapControllers();
app.Run();
